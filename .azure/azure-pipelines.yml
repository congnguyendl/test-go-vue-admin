# Azure pipeline to build & deploy GoVueAdmin demo site
# https://docs.microsoft.com/azure/devops/pipelines/

trigger:
  batch: true
  branches:
    include:
    - '*'

pool:
  vmImage: 'ubuntu-latest'

variables:
  goVersion: '1.14'                     # second latest major.minor version
  GOBIN: '$(GOROOT)/bin'
  GO111MODULE: 'on'
  goBuiltAppName: 'main'
  nodejsVersion: '12.x'                 # latest LTS version
  dockerVersion: '19.03.12'             # latest major.minor version
  herokuRegistry: 'registry.heroku.com'
  herokuApp: 'demo-govueadmin'
  branchMasterChanged: ${{ eq(variables['Build.SourceBranch'], 'refs/heads/master') }}
  sessionDirectory: $(System.DefaultWorkingDirectory)/..
  projectName: 'govueadmin-seed'
  projectDirectory: $(sessionDirectory)/$(projectName)

stages:
- stage: build
  displayName: Build project
  jobs:
  - job: build
    displayName: Build project
    steps:
    - task: GoTool@0
      displayName: Prepare Go env
      inputs:
        version: '$(goVersion)'
    - task: Go@0
      inputs:
        command: 'get'
        arguments: 'github.com/btnguyen2k/go-giter8/g8@v0.5.1'
      displayName: Install go-giter8
    - task: NodeTool@0
      displayName: Prepare NodeJs env
      inputs:
        versionSpec: '$(nodejsVersion)'
    - task: DockerInstaller@0
      displayName: Prepare Docker CLI
      inputs:
        dockerVersion: '$(dockerVersion)'
        releaseType: 'stable'
    - script: |
        g8 --version
        g8 new --no-inputs file://$(System.DefaultWorkingDirectory)
      displayName: Generate project from g8 template
      workingDirectory: $(sessionDirectory)
    - task: Npm@1
      displayName: 'FE: npm install'
      inputs:
        command: install
        workingDir: '$(projectDirectory)/fe-gui'
    - task: Npm@1
      displayName: 'FE: npm run build'
      inputs:
        command: custom
        customCommand: 'run build'
        workingDir: '$(projectDirectory)/fe-gui'
    - script: cd $(projectDirectory)/be-api && go build -o $(goBuiltAppName) -tags netgo -a
      displayName: 'BE: go build'
    - script: cd $(projectDirectory)/be-api && go test -v --cover
      displayName: 'BE: go test'

- stage: deploy_heroku
  displayName: Build image and deploy to Heroku
  dependsOn: build
  condition: eq(variables['branchMasterChanged'], false)
  variables:
  - group: Release
  jobs:
  - job: build_deploy
    displayName: Build image and deploy
    steps:
    - task: GoTool@0
      displayName: Prepare Go env
      inputs:
        version: '$(goVersion)'
    - task: Go@0
      inputs:
        command: 'get'
        arguments: 'github.com/btnguyen2k/go-giter8/g8@v0.5.1'
      displayName: Install go-giter8
    - script: |
        g8 --version
        g8 new --no-inputs file://$(System.DefaultWorkingDirectory)
      displayName: Generate project from g8 template
      workingDirectory: $(sessionDirectory)
    - task: DockerInstaller@0
      displayName: Prepare Docker CLI
      inputs:
        dockerVersion: '$(dockerVersion)'
        releaseType: 'stable'
    - script: |
        APP_SHORTNAME=`jq -r '.shortname' $(projectDirectory)/appinfo.json`
        echo '##vso[task.setvariable variable=APP_SHORTNAME]'$APP_SHORTNAME
        APP_VERSION=`jq -r '.version' $(projectDirectory)/appinfo.json`
        BUILD_DATE=`date '+%Y%m%d'`
        APP_VERSION=${APP_VERSION}-b${BUILD_DATE}.$(Build.BuildId)
        echo '##vso[task.setvariable variable=APP_VERSION]'$APP_VERSION
        appInfo=`jq ".version=\"$APP_VERSION\"" $(projectDirectory)/appinfo.json`
        echo $appInfo > $(projectDirectory)/appinfo.json
        sed -i 's/{?HTTP_LISTEN_PORT}/{?PORT}/g' $(projectDirectory)/be-api/config/api.conf
        sed -i 's/{?DB_PGSQL_URL}/{?DATABASE_URL}/g' $(projectDirectory)/be-api/config/conf.d/api_gvabe.conf
      displayName: Init application info
    - task: Docker@2
      displayName: Build Docker image
      inputs:
        command: build
        buildContext: '$(projectDirectory)'
        repository: '$(APP_SHORTNAME)'
        dockerFile: '$(projectDirectory)/Dockerfile'
        tags: latest
    - script: |
        echo Logging in to $(herokuRegistry)...
        export HEROKU_API_KEY=$(HEROKU_TOKEN)
        echo $(HEROKU_TOKEN) | docker login -u _ --password-stdin $(herokuRegistry)
        docker tag $(APP_SHORTNAME) $(herokuRegistry)/$(herokuApp)/web
        docker images
        echo Pushing image...
        docker push $(herokuRegistry)/$(herokuApp)/web
        echo Releasing image...
        heroku container:release web -a $(herokuApp)
        echo Logging out...
        docker logout $(herokuRegistry)
        unset HEROKU_API_KEY
      displayName: Push and Deploy to Heroku
